/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef donkey_TYPES_H
#define donkey_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace donkey { namespace api {

class PingRequest;

class PingResponse;

class SearchRequest;

class Hit;

class SearchResponse;

class InsertRequest;

class InsertResponse;

class MiscRequest;

class MiscResponse;

class Exception;


class PingRequest {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PingRequest(const PingRequest&);
  PingRequest& operator=(const PingRequest&);
  PingRequest() {
  }

  virtual ~PingRequest() throw();

  bool operator == (const PingRequest & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PingRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PingRequest& obj);
};

void swap(PingRequest &a, PingRequest &b);


class PingResponse {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PingResponse(const PingResponse&);
  PingResponse& operator=(const PingResponse&);
  PingResponse() {
  }

  virtual ~PingResponse() throw();

  bool operator == (const PingResponse & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PingResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PingResponse& obj);
};

void swap(PingResponse &a, PingResponse &b);

typedef struct _SearchRequest__isset {
  _SearchRequest__isset() : K(false), R(false), hint_K(false), hint_R(false) {}
  bool K :1;
  bool R :1;
  bool hint_K :1;
  bool hint_R :1;
} _SearchRequest__isset;

class SearchRequest {
 public:

  static const char* ascii_fingerprint; // = "BA11F2C64CD4E46765A12548814DE9DF";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0x11,0xF2,0xC6,0x4C,0xD4,0xE4,0x67,0x65,0xA1,0x25,0x48,0x81,0x4D,0xE9,0xDF};

  SearchRequest(const SearchRequest&);
  SearchRequest& operator=(const SearchRequest&);
  SearchRequest() : db(0), raw(0), url(), content(), type(), K(0), R(0), hint_K(0), hint_R(0) {
  }

  virtual ~SearchRequest() throw();
  int32_t db;
  bool raw;
  std::string url;
  std::string content;
  std::string type;
  int32_t K;
  double R;
  int32_t hint_K;
  double hint_R;

  _SearchRequest__isset __isset;

  void __set_db(const int32_t val);

  void __set_raw(const bool val);

  void __set_url(const std::string& val);

  void __set_content(const std::string& val);

  void __set_type(const std::string& val);

  void __set_K(const int32_t val);

  void __set_R(const double val);

  void __set_hint_K(const int32_t val);

  void __set_hint_R(const double val);

  bool operator == (const SearchRequest & rhs) const
  {
    if (!(db == rhs.db))
      return false;
    if (!(raw == rhs.raw))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(type == rhs.type))
      return false;
    if (__isset.K != rhs.__isset.K)
      return false;
    else if (__isset.K && !(K == rhs.K))
      return false;
    if (__isset.R != rhs.__isset.R)
      return false;
    else if (__isset.R && !(R == rhs.R))
      return false;
    if (__isset.hint_K != rhs.__isset.hint_K)
      return false;
    else if (__isset.hint_K && !(hint_K == rhs.hint_K))
      return false;
    if (__isset.hint_R != rhs.__isset.hint_R)
      return false;
    else if (__isset.hint_R && !(hint_R == rhs.hint_R))
      return false;
    return true;
  }
  bool operator != (const SearchRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SearchRequest& obj);
};

void swap(SearchRequest &a, SearchRequest &b);


class Hit {
 public:

  static const char* ascii_fingerprint; // = "4B7ED485669D3C37A4F839228FB62EBA";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0x7E,0xD4,0x85,0x66,0x9D,0x3C,0x37,0xA4,0xF8,0x39,0x22,0x8F,0xB6,0x2E,0xBA};

  Hit(const Hit&);
  Hit& operator=(const Hit&);
  Hit() : key(), meta(), score(0), details() {
  }

  virtual ~Hit() throw();
  std::string key;
  std::string meta;
  double score;
  std::string details;

  void __set_key(const std::string& val);

  void __set_meta(const std::string& val);

  void __set_score(const double val);

  void __set_details(const std::string& val);

  bool operator == (const Hit & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(meta == rhs.meta))
      return false;
    if (!(score == rhs.score))
      return false;
    if (!(details == rhs.details))
      return false;
    return true;
  }
  bool operator != (const Hit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Hit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Hit& obj);
};

void swap(Hit &a, Hit &b);


class SearchResponse {
 public:

  static const char* ascii_fingerprint; // = "58ABF158F0A1C63BE2A39BF673888D4A";
  static const uint8_t binary_fingerprint[16]; // = {0x58,0xAB,0xF1,0x58,0xF0,0xA1,0xC6,0x3B,0xE2,0xA3,0x9B,0xF6,0x73,0x88,0x8D,0x4A};

  SearchResponse(const SearchResponse&);
  SearchResponse& operator=(const SearchResponse&);
  SearchResponse() : time(0), load_time(0), filter_time(0), rank_time(0) {
  }

  virtual ~SearchResponse() throw();
  double time;
  double load_time;
  double filter_time;
  double rank_time;
  std::vector<Hit>  hits;

  void __set_time(const double val);

  void __set_load_time(const double val);

  void __set_filter_time(const double val);

  void __set_rank_time(const double val);

  void __set_hits(const std::vector<Hit> & val);

  bool operator == (const SearchResponse & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(load_time == rhs.load_time))
      return false;
    if (!(filter_time == rhs.filter_time))
      return false;
    if (!(rank_time == rhs.rank_time))
      return false;
    if (!(hits == rhs.hits))
      return false;
    return true;
  }
  bool operator != (const SearchResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SearchResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const SearchResponse& obj);
};

void swap(SearchResponse &a, SearchResponse &b);


class InsertRequest {
 public:

  static const char* ascii_fingerprint; // = "9D8FAE78D7A14811B63517532192A59D";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0x8F,0xAE,0x78,0xD7,0xA1,0x48,0x11,0xB6,0x35,0x17,0x53,0x21,0x92,0xA5,0x9D};

  InsertRequest(const InsertRequest&);
  InsertRequest& operator=(const InsertRequest&);
  InsertRequest() : db(0), key(), raw(0), url(), content(), meta(), type() {
  }

  virtual ~InsertRequest() throw();
  int32_t db;
  std::string key;
  bool raw;
  std::string url;
  std::string content;
  std::string meta;
  std::string type;

  void __set_db(const int32_t val);

  void __set_key(const std::string& val);

  void __set_raw(const bool val);

  void __set_url(const std::string& val);

  void __set_content(const std::string& val);

  void __set_meta(const std::string& val);

  void __set_type(const std::string& val);

  bool operator == (const InsertRequest & rhs) const
  {
    if (!(db == rhs.db))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(raw == rhs.raw))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(content == rhs.content))
      return false;
    if (!(meta == rhs.meta))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const InsertRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InsertRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InsertRequest& obj);
};

void swap(InsertRequest &a, InsertRequest &b);


class InsertResponse {
 public:

  static const char* ascii_fingerprint; // = "D40B774F31F5CC6330E604960421B6CB";
  static const uint8_t binary_fingerprint[16]; // = {0xD4,0x0B,0x77,0x4F,0x31,0xF5,0xCC,0x63,0x30,0xE6,0x04,0x96,0x04,0x21,0xB6,0xCB};

  InsertResponse(const InsertResponse&);
  InsertResponse& operator=(const InsertResponse&);
  InsertResponse() : time(0), load_time(0), journal_time(0), index_time(0) {
  }

  virtual ~InsertResponse() throw();
  double time;
  double load_time;
  double journal_time;
  double index_time;

  void __set_time(const double val);

  void __set_load_time(const double val);

  void __set_journal_time(const double val);

  void __set_index_time(const double val);

  bool operator == (const InsertResponse & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    if (!(load_time == rhs.load_time))
      return false;
    if (!(journal_time == rhs.journal_time))
      return false;
    if (!(index_time == rhs.index_time))
      return false;
    return true;
  }
  bool operator != (const InsertResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InsertResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const InsertResponse& obj);
};

void swap(InsertResponse &a, InsertResponse &b);


class MiscRequest {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  MiscRequest(const MiscRequest&);
  MiscRequest& operator=(const MiscRequest&);
  MiscRequest() : method(), db(0) {
  }

  virtual ~MiscRequest() throw();
  std::string method;
  int32_t db;

  void __set_method(const std::string& val);

  void __set_db(const int32_t val);

  bool operator == (const MiscRequest & rhs) const
  {
    if (!(method == rhs.method))
      return false;
    if (!(db == rhs.db))
      return false;
    return true;
  }
  bool operator != (const MiscRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MiscRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MiscRequest& obj);
};

void swap(MiscRequest &a, MiscRequest &b);


class MiscResponse {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  MiscResponse(const MiscResponse&);
  MiscResponse& operator=(const MiscResponse&);
  MiscResponse() : code(0), text() {
  }

  virtual ~MiscResponse() throw();
  int32_t code;
  std::string text;

  void __set_code(const int32_t val);

  void __set_text(const std::string& val);

  bool operator == (const MiscResponse & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(text == rhs.text))
      return false;
    return true;
  }
  bool operator != (const MiscResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MiscResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MiscResponse& obj);
};

void swap(MiscResponse &a, MiscResponse &b);

typedef struct _Exception__isset {
  _Exception__isset() : what(false), why(false) {}
  bool what :1;
  bool why :1;
} _Exception__isset;

class Exception : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  Exception(const Exception&);
  Exception& operator=(const Exception&);
  Exception() : what(0), why() {
  }

  virtual ~Exception() throw();
  int32_t what;
  std::string why;

  _Exception__isset __isset;

  void __set_what(const int32_t val);

  void __set_why(const std::string& val);

  bool operator == (const Exception & rhs) const
  {
    if (!(what == rhs.what))
      return false;
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const Exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Exception& obj);
};

void swap(Exception &a, Exception &b);

}} // namespace

#endif
