/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Donkey_H
#define Donkey_H

#include <thrift/TDispatchProcessor.h>
#include "donkey_types.h"

namespace donkey { namespace api {

class DonkeyIf {
 public:
  virtual ~DonkeyIf() {}
  virtual void ping(PingResponse& _return, const PingRequest& request) = 0;
  virtual void search(SearchResponse& _return, const SearchRequest& request) = 0;
  virtual void insert(InsertResponse& _return, const InsertRequest& request) = 0;
  virtual void misc(MiscResponse& _return, const MiscRequest& request) = 0;
};

class DonkeyIfFactory {
 public:
  typedef DonkeyIf Handler;

  virtual ~DonkeyIfFactory() {}

  virtual DonkeyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DonkeyIf* /* handler */) = 0;
};

class DonkeyIfSingletonFactory : virtual public DonkeyIfFactory {
 public:
  DonkeyIfSingletonFactory(const boost::shared_ptr<DonkeyIf>& iface) : iface_(iface) {}
  virtual ~DonkeyIfSingletonFactory() {}

  virtual DonkeyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DonkeyIf* /* handler */) {}

 protected:
  boost::shared_ptr<DonkeyIf> iface_;
};

class DonkeyNull : virtual public DonkeyIf {
 public:
  virtual ~DonkeyNull() {}
  void ping(PingResponse& /* _return */, const PingRequest& /* request */) {
    return;
  }
  void search(SearchResponse& /* _return */, const SearchRequest& /* request */) {
    return;
  }
  void insert(InsertResponse& /* _return */, const InsertRequest& /* request */) {
    return;
  }
  void misc(MiscResponse& /* _return */, const MiscRequest& /* request */) {
    return;
  }
};


class Donkey_ping_args {
 public:

  static const char* ascii_fingerprint; // = "2C32A565725135A023CB591D1A993CFD";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};

  Donkey_ping_args(const Donkey_ping_args&);
  Donkey_ping_args& operator=(const Donkey_ping_args&);
  Donkey_ping_args() {
  }

  virtual ~Donkey_ping_args() throw();
  PingRequest request;

  void __set_request(const PingRequest& val);

  bool operator == (const Donkey_ping_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Donkey_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Donkey_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_ping_args& obj);
};


class Donkey_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "2C32A565725135A023CB591D1A993CFD";
  static const uint8_t binary_fingerprint[16]; // = {0x2C,0x32,0xA5,0x65,0x72,0x51,0x35,0xA0,0x23,0xCB,0x59,0x1D,0x1A,0x99,0x3C,0xFD};


  virtual ~Donkey_ping_pargs() throw();
  const PingRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_ping_pargs& obj);
};

typedef struct _Donkey_ping_result__isset {
  _Donkey_ping_result__isset() : success(false) {}
  bool success :1;
} _Donkey_ping_result__isset;

class Donkey_ping_result {
 public:

  static const char* ascii_fingerprint; // = "3A26B8DD823AB72F2FE94404F3D36070";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x26,0xB8,0xDD,0x82,0x3A,0xB7,0x2F,0x2F,0xE9,0x44,0x04,0xF3,0xD3,0x60,0x70};

  Donkey_ping_result(const Donkey_ping_result&);
  Donkey_ping_result& operator=(const Donkey_ping_result&);
  Donkey_ping_result() {
  }

  virtual ~Donkey_ping_result() throw();
  PingResponse success;

  _Donkey_ping_result__isset __isset;

  void __set_success(const PingResponse& val);

  bool operator == (const Donkey_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Donkey_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Donkey_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_ping_result& obj);
};

typedef struct _Donkey_ping_presult__isset {
  _Donkey_ping_presult__isset() : success(false) {}
  bool success :1;
} _Donkey_ping_presult__isset;

class Donkey_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "3A26B8DD823AB72F2FE94404F3D36070";
  static const uint8_t binary_fingerprint[16]; // = {0x3A,0x26,0xB8,0xDD,0x82,0x3A,0xB7,0x2F,0x2F,0xE9,0x44,0x04,0xF3,0xD3,0x60,0x70};


  virtual ~Donkey_ping_presult() throw();
  PingResponse* success;

  _Donkey_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Donkey_ping_presult& obj);
};


class Donkey_search_args {
 public:

  static const char* ascii_fingerprint; // = "FA271321BDEC8761A79484CA934D45DE";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x27,0x13,0x21,0xBD,0xEC,0x87,0x61,0xA7,0x94,0x84,0xCA,0x93,0x4D,0x45,0xDE};

  Donkey_search_args(const Donkey_search_args&);
  Donkey_search_args& operator=(const Donkey_search_args&);
  Donkey_search_args() {
  }

  virtual ~Donkey_search_args() throw();
  SearchRequest request;

  void __set_request(const SearchRequest& val);

  bool operator == (const Donkey_search_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Donkey_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Donkey_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_search_args& obj);
};


class Donkey_search_pargs {
 public:

  static const char* ascii_fingerprint; // = "FA271321BDEC8761A79484CA934D45DE";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0x27,0x13,0x21,0xBD,0xEC,0x87,0x61,0xA7,0x94,0x84,0xCA,0x93,0x4D,0x45,0xDE};


  virtual ~Donkey_search_pargs() throw();
  const SearchRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_search_pargs& obj);
};

typedef struct _Donkey_search_result__isset {
  _Donkey_search_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Donkey_search_result__isset;

class Donkey_search_result {
 public:

  static const char* ascii_fingerprint; // = "9878473420731D3CBA67471AB13C5972";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x78,0x47,0x34,0x20,0x73,0x1D,0x3C,0xBA,0x67,0x47,0x1A,0xB1,0x3C,0x59,0x72};

  Donkey_search_result(const Donkey_search_result&);
  Donkey_search_result& operator=(const Donkey_search_result&);
  Donkey_search_result() {
  }

  virtual ~Donkey_search_result() throw();
  SearchResponse success;
  Exception e;

  _Donkey_search_result__isset __isset;

  void __set_success(const SearchResponse& val);

  void __set_e(const Exception& val);

  bool operator == (const Donkey_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Donkey_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Donkey_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_search_result& obj);
};

typedef struct _Donkey_search_presult__isset {
  _Donkey_search_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Donkey_search_presult__isset;

class Donkey_search_presult {
 public:

  static const char* ascii_fingerprint; // = "9878473420731D3CBA67471AB13C5972";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x78,0x47,0x34,0x20,0x73,0x1D,0x3C,0xBA,0x67,0x47,0x1A,0xB1,0x3C,0x59,0x72};


  virtual ~Donkey_search_presult() throw();
  SearchResponse* success;
  Exception e;

  _Donkey_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Donkey_search_presult& obj);
};


class Donkey_insert_args {
 public:

  static const char* ascii_fingerprint; // = "6517A08F71B32C1CD9222600D98C1004";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x17,0xA0,0x8F,0x71,0xB3,0x2C,0x1C,0xD9,0x22,0x26,0x00,0xD9,0x8C,0x10,0x04};

  Donkey_insert_args(const Donkey_insert_args&);
  Donkey_insert_args& operator=(const Donkey_insert_args&);
  Donkey_insert_args() {
  }

  virtual ~Donkey_insert_args() throw();
  InsertRequest request;

  void __set_request(const InsertRequest& val);

  bool operator == (const Donkey_insert_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Donkey_insert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Donkey_insert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_insert_args& obj);
};


class Donkey_insert_pargs {
 public:

  static const char* ascii_fingerprint; // = "6517A08F71B32C1CD9222600D98C1004";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0x17,0xA0,0x8F,0x71,0xB3,0x2C,0x1C,0xD9,0x22,0x26,0x00,0xD9,0x8C,0x10,0x04};


  virtual ~Donkey_insert_pargs() throw();
  const InsertRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_insert_pargs& obj);
};

typedef struct _Donkey_insert_result__isset {
  _Donkey_insert_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Donkey_insert_result__isset;

class Donkey_insert_result {
 public:

  static const char* ascii_fingerprint; // = "FF89B6D0D1F845AD966A0081C7D36270";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x89,0xB6,0xD0,0xD1,0xF8,0x45,0xAD,0x96,0x6A,0x00,0x81,0xC7,0xD3,0x62,0x70};

  Donkey_insert_result(const Donkey_insert_result&);
  Donkey_insert_result& operator=(const Donkey_insert_result&);
  Donkey_insert_result() {
  }

  virtual ~Donkey_insert_result() throw();
  InsertResponse success;
  Exception e;

  _Donkey_insert_result__isset __isset;

  void __set_success(const InsertResponse& val);

  void __set_e(const Exception& val);

  bool operator == (const Donkey_insert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Donkey_insert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Donkey_insert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_insert_result& obj);
};

typedef struct _Donkey_insert_presult__isset {
  _Donkey_insert_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Donkey_insert_presult__isset;

class Donkey_insert_presult {
 public:

  static const char* ascii_fingerprint; // = "FF89B6D0D1F845AD966A0081C7D36270";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0x89,0xB6,0xD0,0xD1,0xF8,0x45,0xAD,0x96,0x6A,0x00,0x81,0xC7,0xD3,0x62,0x70};


  virtual ~Donkey_insert_presult() throw();
  InsertResponse* success;
  Exception e;

  _Donkey_insert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Donkey_insert_presult& obj);
};


class Donkey_misc_args {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};

  Donkey_misc_args(const Donkey_misc_args&);
  Donkey_misc_args& operator=(const Donkey_misc_args&);
  Donkey_misc_args() {
  }

  virtual ~Donkey_misc_args() throw();
  MiscRequest request;

  void __set_request(const MiscRequest& val);

  bool operator == (const Donkey_misc_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const Donkey_misc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Donkey_misc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_misc_args& obj);
};


class Donkey_misc_pargs {
 public:

  static const char* ascii_fingerprint; // = "2BD9E1CC52BCB0899198EEADB3593B00";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xD9,0xE1,0xCC,0x52,0xBC,0xB0,0x89,0x91,0x98,0xEE,0xAD,0xB3,0x59,0x3B,0x00};


  virtual ~Donkey_misc_pargs() throw();
  const MiscRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_misc_pargs& obj);
};

typedef struct _Donkey_misc_result__isset {
  _Donkey_misc_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Donkey_misc_result__isset;

class Donkey_misc_result {
 public:

  static const char* ascii_fingerprint; // = "BB2A6AC9969715295B79D9C9C3A45BA3";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x2A,0x6A,0xC9,0x96,0x97,0x15,0x29,0x5B,0x79,0xD9,0xC9,0xC3,0xA4,0x5B,0xA3};

  Donkey_misc_result(const Donkey_misc_result&);
  Donkey_misc_result& operator=(const Donkey_misc_result&);
  Donkey_misc_result() {
  }

  virtual ~Donkey_misc_result() throw();
  MiscResponse success;
  Exception e;

  _Donkey_misc_result__isset __isset;

  void __set_success(const MiscResponse& val);

  void __set_e(const Exception& val);

  bool operator == (const Donkey_misc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Donkey_misc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Donkey_misc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Donkey_misc_result& obj);
};

typedef struct _Donkey_misc_presult__isset {
  _Donkey_misc_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Donkey_misc_presult__isset;

class Donkey_misc_presult {
 public:

  static const char* ascii_fingerprint; // = "BB2A6AC9969715295B79D9C9C3A45BA3";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x2A,0x6A,0xC9,0x96,0x97,0x15,0x29,0x5B,0x79,0xD9,0xC9,0xC3,0xA4,0x5B,0xA3};


  virtual ~Donkey_misc_presult() throw();
  MiscResponse* success;
  Exception e;

  _Donkey_misc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const Donkey_misc_presult& obj);
};

class DonkeyClient : virtual public DonkeyIf {
 public:
  DonkeyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DonkeyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping(PingResponse& _return, const PingRequest& request);
  void send_ping(const PingRequest& request);
  void recv_ping(PingResponse& _return);
  void search(SearchResponse& _return, const SearchRequest& request);
  void send_search(const SearchRequest& request);
  void recv_search(SearchResponse& _return);
  void insert(InsertResponse& _return, const InsertRequest& request);
  void send_insert(const InsertRequest& request);
  void recv_insert(InsertResponse& _return);
  void misc(MiscResponse& _return, const MiscRequest& request);
  void send_misc(const MiscRequest& request);
  void recv_misc(MiscResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DonkeyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DonkeyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DonkeyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_misc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DonkeyProcessor(boost::shared_ptr<DonkeyIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &DonkeyProcessor::process_ping;
    processMap_["search"] = &DonkeyProcessor::process_search;
    processMap_["insert"] = &DonkeyProcessor::process_insert;
    processMap_["misc"] = &DonkeyProcessor::process_misc;
  }

  virtual ~DonkeyProcessor() {}
};

class DonkeyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DonkeyProcessorFactory(const ::boost::shared_ptr< DonkeyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DonkeyIfFactory > handlerFactory_;
};

class DonkeyMultiface : virtual public DonkeyIf {
 public:
  DonkeyMultiface(std::vector<boost::shared_ptr<DonkeyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DonkeyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DonkeyIf> > ifaces_;
  DonkeyMultiface() {}
  void add(boost::shared_ptr<DonkeyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping(PingResponse& _return, const PingRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(_return, request);
    }
    ifaces_[i]->ping(_return, request);
    return;
  }

  void search(SearchResponse& _return, const SearchRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search(_return, request);
    }
    ifaces_[i]->search(_return, request);
    return;
  }

  void insert(InsertResponse& _return, const InsertRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insert(_return, request);
    }
    ifaces_[i]->insert(_return, request);
    return;
  }

  void misc(MiscResponse& _return, const MiscRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->misc(_return, request);
    }
    ifaces_[i]->misc(_return, request);
    return;
  }

};

}} // namespace

#endif
