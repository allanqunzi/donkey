/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "donkey_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace donkey { namespace api {


PingRequest::~PingRequest() throw() {
}


const char* PingRequest::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t PingRequest::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t PingRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PingRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PingRequest");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PingRequest &a, PingRequest &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

PingRequest::PingRequest(const PingRequest& other0) {
  (void) other0;
}
PingRequest& PingRequest::operator=(const PingRequest& other1) {
  (void) other1;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PingRequest& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "PingRequest(";
  out << ")";
  return out;
}


PingResponse::~PingResponse() throw() {
}


const char* PingResponse::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t PingResponse::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t PingResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PingResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("PingResponse");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(PingResponse &a, PingResponse &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

PingResponse::PingResponse(const PingResponse& other2) {
  (void) other2;
}
PingResponse& PingResponse::operator=(const PingResponse& other3) {
  (void) other3;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const PingResponse& obj) {
  using apache::thrift::to_string;
  (void) obj;
  out << "PingResponse(";
  out << ")";
  return out;
}


SearchRequest::~SearchRequest() throw() {
}


void SearchRequest::__set_db(const int32_t val) {
  this->db = val;
}

void SearchRequest::__set_raw(const bool val) {
  this->raw = val;
}

void SearchRequest::__set_url(const std::string& val) {
  this->url = val;
}

void SearchRequest::__set_content(const std::string& val) {
  this->content = val;
}

void SearchRequest::__set_type(const std::string& val) {
  this->type = val;
}

void SearchRequest::__set_K(const int32_t val) {
  this->K = val;
__isset.K = true;
}

void SearchRequest::__set_R(const double val) {
  this->R = val;
__isset.R = true;
}

void SearchRequest::__set_hint_K(const int32_t val) {
  this->hint_K = val;
__isset.hint_K = true;
}

void SearchRequest::__set_hint_R(const double val) {
  this->hint_R = val;
__isset.hint_R = true;
}

const char* SearchRequest::ascii_fingerprint = "BA11F2C64CD4E46765A12548814DE9DF";
const uint8_t SearchRequest::binary_fingerprint[16] = {0xBA,0x11,0xF2,0xC6,0x4C,0xD4,0xE4,0x67,0x65,0xA1,0x25,0x48,0x81,0x4D,0xE9,0xDF};

uint32_t SearchRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_db = false;
  bool isset_raw = false;
  bool isset_url = false;
  bool isset_content = false;
  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->db);
          isset_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->raw);
          isset_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          isset_content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->K);
          this->__isset.K = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->R);
          this->__isset.R = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hint_K);
          this->__isset.hint_K = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hint_R);
          this->__isset.hint_R = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_db)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_raw)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_content)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SearchRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SearchRequest");

  xfer += oprot->writeFieldBegin("db", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("raw", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.K) {
    xfer += oprot->writeFieldBegin("K", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->K);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.R) {
    xfer += oprot->writeFieldBegin("R", ::apache::thrift::protocol::T_DOUBLE, 7);
    xfer += oprot->writeDouble(this->R);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hint_K) {
    xfer += oprot->writeFieldBegin("hint_K", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->hint_K);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.hint_R) {
    xfer += oprot->writeFieldBegin("hint_R", ::apache::thrift::protocol::T_DOUBLE, 9);
    xfer += oprot->writeDouble(this->hint_R);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SearchRequest &a, SearchRequest &b) {
  using ::std::swap;
  swap(a.db, b.db);
  swap(a.raw, b.raw);
  swap(a.url, b.url);
  swap(a.content, b.content);
  swap(a.type, b.type);
  swap(a.K, b.K);
  swap(a.R, b.R);
  swap(a.hint_K, b.hint_K);
  swap(a.hint_R, b.hint_R);
  swap(a.__isset, b.__isset);
}

SearchRequest::SearchRequest(const SearchRequest& other4) {
  db = other4.db;
  raw = other4.raw;
  url = other4.url;
  content = other4.content;
  type = other4.type;
  K = other4.K;
  R = other4.R;
  hint_K = other4.hint_K;
  hint_R = other4.hint_R;
  __isset = other4.__isset;
}
SearchRequest& SearchRequest::operator=(const SearchRequest& other5) {
  db = other5.db;
  raw = other5.raw;
  url = other5.url;
  content = other5.content;
  type = other5.type;
  K = other5.K;
  R = other5.R;
  hint_K = other5.hint_K;
  hint_R = other5.hint_R;
  __isset = other5.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SearchRequest& obj) {
  using apache::thrift::to_string;
  out << "SearchRequest(";
  out << "db=" << to_string(obj.db);
  out << ", " << "raw=" << to_string(obj.raw);
  out << ", " << "url=" << to_string(obj.url);
  out << ", " << "content=" << to_string(obj.content);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "K="; (obj.__isset.K ? (out << to_string(obj.K)) : (out << "<null>"));
  out << ", " << "R="; (obj.__isset.R ? (out << to_string(obj.R)) : (out << "<null>"));
  out << ", " << "hint_K="; (obj.__isset.hint_K ? (out << to_string(obj.hint_K)) : (out << "<null>"));
  out << ", " << "hint_R="; (obj.__isset.hint_R ? (out << to_string(obj.hint_R)) : (out << "<null>"));
  out << ")";
  return out;
}


Hit::~Hit() throw() {
}


void Hit::__set_key(const std::string& val) {
  this->key = val;
}

void Hit::__set_meta(const std::string& val) {
  this->meta = val;
}

void Hit::__set_score(const double val) {
  this->score = val;
}

void Hit::__set_details(const std::string& val) {
  this->details = val;
}

const char* Hit::ascii_fingerprint = "4B7ED485669D3C37A4F839228FB62EBA";
const uint8_t Hit::binary_fingerprint[16] = {0x4B,0x7E,0xD4,0x85,0x66,0x9D,0x3C,0x37,0xA4,0xF8,0x39,0x22,0x8F,0xB6,0x2E,0xBA};

uint32_t Hit::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_key = false;
  bool isset_meta = false;
  bool isset_score = false;
  bool isset_details = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          isset_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->meta);
          isset_meta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->score);
          isset_score = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->details);
          isset_details = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_score)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_details)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Hit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Hit");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->meta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("score", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->score);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("details", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->details);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Hit &a, Hit &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.meta, b.meta);
  swap(a.score, b.score);
  swap(a.details, b.details);
}

Hit::Hit(const Hit& other6) {
  key = other6.key;
  meta = other6.meta;
  score = other6.score;
  details = other6.details;
}
Hit& Hit::operator=(const Hit& other7) {
  key = other7.key;
  meta = other7.meta;
  score = other7.score;
  details = other7.details;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Hit& obj) {
  using apache::thrift::to_string;
  out << "Hit(";
  out << "key=" << to_string(obj.key);
  out << ", " << "meta=" << to_string(obj.meta);
  out << ", " << "score=" << to_string(obj.score);
  out << ", " << "details=" << to_string(obj.details);
  out << ")";
  return out;
}


SearchResponse::~SearchResponse() throw() {
}


void SearchResponse::__set_time(const double val) {
  this->time = val;
}

void SearchResponse::__set_load_time(const double val) {
  this->load_time = val;
}

void SearchResponse::__set_filter_time(const double val) {
  this->filter_time = val;
}

void SearchResponse::__set_rank_time(const double val) {
  this->rank_time = val;
}

void SearchResponse::__set_hits(const std::vector<Hit> & val) {
  this->hits = val;
}

const char* SearchResponse::ascii_fingerprint = "58ABF158F0A1C63BE2A39BF673888D4A";
const uint8_t SearchResponse::binary_fingerprint[16] = {0x58,0xAB,0xF1,0x58,0xF0,0xA1,0xC6,0x3B,0xE2,0xA3,0x9B,0xF6,0x73,0x88,0x8D,0x4A};

uint32_t SearchResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_time = false;
  bool isset_load_time = false;
  bool isset_filter_time = false;
  bool isset_rank_time = false;
  bool isset_hits = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->time);
          isset_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->load_time);
          isset_load_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->filter_time);
          isset_filter_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rank_time);
          isset_rank_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->hits.clear();
            uint32_t _size8;
            ::apache::thrift::protocol::TType _etype11;
            xfer += iprot->readListBegin(_etype11, _size8);
            this->hits.resize(_size8);
            uint32_t _i12;
            for (_i12 = 0; _i12 < _size8; ++_i12)
            {
              xfer += this->hits[_i12].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_hits = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_load_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_filter_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_rank_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_hits)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SearchResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("SearchResponse");

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("load_time", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->load_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filter_time", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->filter_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rank_time", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->rank_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hits", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->hits.size()));
    std::vector<Hit> ::const_iterator _iter13;
    for (_iter13 = this->hits.begin(); _iter13 != this->hits.end(); ++_iter13)
    {
      xfer += (*_iter13).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(SearchResponse &a, SearchResponse &b) {
  using ::std::swap;
  swap(a.time, b.time);
  swap(a.load_time, b.load_time);
  swap(a.filter_time, b.filter_time);
  swap(a.rank_time, b.rank_time);
  swap(a.hits, b.hits);
}

SearchResponse::SearchResponse(const SearchResponse& other14) {
  time = other14.time;
  load_time = other14.load_time;
  filter_time = other14.filter_time;
  rank_time = other14.rank_time;
  hits = other14.hits;
}
SearchResponse& SearchResponse::operator=(const SearchResponse& other15) {
  time = other15.time;
  load_time = other15.load_time;
  filter_time = other15.filter_time;
  rank_time = other15.rank_time;
  hits = other15.hits;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const SearchResponse& obj) {
  using apache::thrift::to_string;
  out << "SearchResponse(";
  out << "time=" << to_string(obj.time);
  out << ", " << "load_time=" << to_string(obj.load_time);
  out << ", " << "filter_time=" << to_string(obj.filter_time);
  out << ", " << "rank_time=" << to_string(obj.rank_time);
  out << ", " << "hits=" << to_string(obj.hits);
  out << ")";
  return out;
}


InsertRequest::~InsertRequest() throw() {
}


void InsertRequest::__set_db(const int32_t val) {
  this->db = val;
}

void InsertRequest::__set_key(const std::string& val) {
  this->key = val;
}

void InsertRequest::__set_raw(const bool val) {
  this->raw = val;
}

void InsertRequest::__set_url(const std::string& val) {
  this->url = val;
}

void InsertRequest::__set_content(const std::string& val) {
  this->content = val;
}

void InsertRequest::__set_meta(const std::string& val) {
  this->meta = val;
}

void InsertRequest::__set_type(const std::string& val) {
  this->type = val;
}

const char* InsertRequest::ascii_fingerprint = "9D8FAE78D7A14811B63517532192A59D";
const uint8_t InsertRequest::binary_fingerprint[16] = {0x9D,0x8F,0xAE,0x78,0xD7,0xA1,0x48,0x11,0xB6,0x35,0x17,0x53,0x21,0x92,0xA5,0x9D};

uint32_t InsertRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_db = false;
  bool isset_key = false;
  bool isset_raw = false;
  bool isset_url = false;
  bool isset_content = false;
  bool isset_meta = false;
  bool isset_type = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->db);
          isset_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          isset_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->raw);
          isset_raw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          isset_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          isset_content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->meta);
          isset_meta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_db)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_raw)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_url)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_content)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_meta)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InsertRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InsertRequest");

  xfer += oprot->writeFieldBegin("db", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("raw", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->raw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("meta", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->meta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InsertRequest &a, InsertRequest &b) {
  using ::std::swap;
  swap(a.db, b.db);
  swap(a.key, b.key);
  swap(a.raw, b.raw);
  swap(a.url, b.url);
  swap(a.content, b.content);
  swap(a.meta, b.meta);
  swap(a.type, b.type);
}

InsertRequest::InsertRequest(const InsertRequest& other16) {
  db = other16.db;
  key = other16.key;
  raw = other16.raw;
  url = other16.url;
  content = other16.content;
  meta = other16.meta;
  type = other16.type;
}
InsertRequest& InsertRequest::operator=(const InsertRequest& other17) {
  db = other17.db;
  key = other17.key;
  raw = other17.raw;
  url = other17.url;
  content = other17.content;
  meta = other17.meta;
  type = other17.type;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InsertRequest& obj) {
  using apache::thrift::to_string;
  out << "InsertRequest(";
  out << "db=" << to_string(obj.db);
  out << ", " << "key=" << to_string(obj.key);
  out << ", " << "raw=" << to_string(obj.raw);
  out << ", " << "url=" << to_string(obj.url);
  out << ", " << "content=" << to_string(obj.content);
  out << ", " << "meta=" << to_string(obj.meta);
  out << ", " << "type=" << to_string(obj.type);
  out << ")";
  return out;
}


InsertResponse::~InsertResponse() throw() {
}


void InsertResponse::__set_time(const double val) {
  this->time = val;
}

void InsertResponse::__set_load_time(const double val) {
  this->load_time = val;
}

void InsertResponse::__set_journal_time(const double val) {
  this->journal_time = val;
}

void InsertResponse::__set_index_time(const double val) {
  this->index_time = val;
}

const char* InsertResponse::ascii_fingerprint = "D40B774F31F5CC6330E604960421B6CB";
const uint8_t InsertResponse::binary_fingerprint[16] = {0xD4,0x0B,0x77,0x4F,0x31,0xF5,0xCC,0x63,0x30,0xE6,0x04,0x96,0x04,0x21,0xB6,0xCB};

uint32_t InsertResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_time = false;
  bool isset_load_time = false;
  bool isset_journal_time = false;
  bool isset_index_time = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->time);
          isset_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->load_time);
          isset_load_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->journal_time);
          isset_journal_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->index_time);
          isset_index_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_load_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_journal_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_index_time)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t InsertResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("InsertResponse");

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("load_time", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->load_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("journal_time", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->journal_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index_time", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->index_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(InsertResponse &a, InsertResponse &b) {
  using ::std::swap;
  swap(a.time, b.time);
  swap(a.load_time, b.load_time);
  swap(a.journal_time, b.journal_time);
  swap(a.index_time, b.index_time);
}

InsertResponse::InsertResponse(const InsertResponse& other18) {
  time = other18.time;
  load_time = other18.load_time;
  journal_time = other18.journal_time;
  index_time = other18.index_time;
}
InsertResponse& InsertResponse::operator=(const InsertResponse& other19) {
  time = other19.time;
  load_time = other19.load_time;
  journal_time = other19.journal_time;
  index_time = other19.index_time;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const InsertResponse& obj) {
  using apache::thrift::to_string;
  out << "InsertResponse(";
  out << "time=" << to_string(obj.time);
  out << ", " << "load_time=" << to_string(obj.load_time);
  out << ", " << "journal_time=" << to_string(obj.journal_time);
  out << ", " << "index_time=" << to_string(obj.index_time);
  out << ")";
  return out;
}


MiscRequest::~MiscRequest() throw() {
}


void MiscRequest::__set_method(const std::string& val) {
  this->method = val;
}

void MiscRequest::__set_db(const int32_t val) {
  this->db = val;
}

const char* MiscRequest::ascii_fingerprint = "EEBC915CE44901401D881E6091423036";
const uint8_t MiscRequest::binary_fingerprint[16] = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

uint32_t MiscRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_method = false;
  bool isset_db = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->method);
          isset_method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->db);
          isset_db = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_method)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_db)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MiscRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MiscRequest");

  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("db", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->db);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MiscRequest &a, MiscRequest &b) {
  using ::std::swap;
  swap(a.method, b.method);
  swap(a.db, b.db);
}

MiscRequest::MiscRequest(const MiscRequest& other20) {
  method = other20.method;
  db = other20.db;
}
MiscRequest& MiscRequest::operator=(const MiscRequest& other21) {
  method = other21.method;
  db = other21.db;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MiscRequest& obj) {
  using apache::thrift::to_string;
  out << "MiscRequest(";
  out << "method=" << to_string(obj.method);
  out << ", " << "db=" << to_string(obj.db);
  out << ")";
  return out;
}


MiscResponse::~MiscResponse() throw() {
}


void MiscResponse::__set_code(const int32_t val) {
  this->code = val;
}

void MiscResponse::__set_text(const std::string& val) {
  this->text = val;
}

const char* MiscResponse::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t MiscResponse::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t MiscResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code = false;
  bool isset_text = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->code);
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->text);
          isset_text = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_text)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t MiscResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("MiscResponse");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("text", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->text);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(MiscResponse &a, MiscResponse &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.text, b.text);
}

MiscResponse::MiscResponse(const MiscResponse& other22) {
  code = other22.code;
  text = other22.text;
}
MiscResponse& MiscResponse::operator=(const MiscResponse& other23) {
  code = other23.code;
  text = other23.text;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const MiscResponse& obj) {
  using apache::thrift::to_string;
  out << "MiscResponse(";
  out << "code=" << to_string(obj.code);
  out << ", " << "text=" << to_string(obj.text);
  out << ")";
  return out;
}


Exception::~Exception() throw() {
}


void Exception::__set_what(const int32_t val) {
  this->what = val;
}

void Exception::__set_why(const std::string& val) {
  this->why = val;
}

const char* Exception::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t Exception::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t Exception::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->what);
          this->__isset.what = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->why);
          this->__isset.why = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Exception::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Exception");

  xfer += oprot->writeFieldBegin("what", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->what);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("why", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->why);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Exception &a, Exception &b) {
  using ::std::swap;
  swap(a.what, b.what);
  swap(a.why, b.why);
  swap(a.__isset, b.__isset);
}

Exception::Exception(const Exception& other24) : TException() {
  what = other24.what;
  why = other24.why;
  __isset = other24.__isset;
}
Exception& Exception::operator=(const Exception& other25) {
  what = other25.what;
  why = other25.why;
  __isset = other25.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Exception& obj) {
  using apache::thrift::to_string;
  out << "Exception(";
  out << "what=" << to_string(obj.what);
  out << ", " << "why=" << to_string(obj.why);
  out << ")";
  return out;
}

}} // namespace
